/*
   GENERIC MODULAR CODE

   Assume the existence of the following global constants:
     glob_p <- modulus "P" (prime number)
     glob_mp <- "2^(NLIMBS*64) - P"
     glob_pm2 <- "P - 2"
     glob_oneM <- "R % P = 2^(NLIMBS*64) % P"
     glob_rM <- "R^2 % P = 2^(2*NLIMBS*64) % P"

   Name Conventions:
     _* <- local (non-exported) jasmin functions
     __* <- inlined functions
     *M <- dealing with Montgomery representation
*/

require "bn_generic.jazz"


/* CONDITIONAL-ADD-P */
inline fn __bn_caddP
( reg bool cf
, reg ptr u64[NLIMBS] x tmp
) -> reg ptr u64[NLIMBS]
{ inline int i;
  reg u64 t t0;

  tmp = __bn_copy(glob_p);

/*
  _, t -= t - cf;
  for i = 0 to NLIMBS {
    tmp[i] &= t;
  }
*/
  t0 = 0;
  for i = 0 to NLIMBS {
    t = tmp[i];
    t = t0 if !cf;
    tmp[i] = t;
  }

  _, x = __bn_addc( x, tmp );

  return x;
}

/* x-P if P<=x else x */
inline fn __bn_cminusP
( reg ptr u64[NLIMBS] x tmp
) -> reg ptr u64[NLIMBS]
{ 
  inline int i;
  reg bool _cf;
  reg u64 t;

  tmp = __bn_copy(x);
  _cf, tmp = __bn_addc(tmp, glob_mp);

  x = __bn_cmov(_cf, x, tmp);
  return x;
}

inline fn __bn_addm
( reg ptr u64[NLIMBS] a b tmp
) -> reg ptr u64[NLIMBS] {
 _, a = __bn_addc(a, b);
 a = __bn_cminusP(a, tmp);
 return a;
}

/* Modular addition */
fn _bn_addm
( reg ptr u64[NLIMBS] a b
) -> reg ptr u64[NLIMBS] {
 stack u64[NLIMBS] tmp;
 a = __bn_addm(a, b, tmp);
 return a;
}

inline fn __bn_subm
( reg ptr u64[NLIMBS] a b tmp
) -> reg ptr u64[NLIMBS] {
 reg bool cf;
 cf, a = __bn_subc(a, b);
 a = __bn_caddP(cf, a, tmp);
 return a;
}

/* Modular subtraction */
fn _bn_subm
( reg ptr u64[NLIMBS] a b
) -> reg ptr u64[NLIMBS] {
 stack u64[NLIMBS] tmp;
 a = __bn_subm(a, b, tmp);
 return a;
}


inline fn __bn_rdcn
( reg ptr u64[2*NLIMBS] a
, reg ptr u64[NLIMBS] r tmp
) -> reg ptr u64[NLIMBS] {
  inline int k;
  reg bool cf;
  reg u64 t t0 t1 zero u0r p0;
  reg u64[3] x;

  _, _, _, _, _, zero = #set0();
  u0r = glob_u0;
  p0 = glob_p[0];

  _, _, _, _, _, x[0] = #set0();
  _, _, _, _, _, x[1] = #set0();
  _, _, _, _, _, x[2] = #set0();

  for k = 0 to NLIMBS {
    x = __muln_innerloop(k, 0, k, r, glob_p, x);
    t0 = a[k];
    x = __addacc3(zero, t0, x, k);
    t0 = x[k % 3];
    _, t0 = t0 * u0r;
    r[k] = t0;
    t1, t0 = t0 * p0;
    x = __addacc3(t1, t0, x, k);
  }
  for k = NLIMBS to 2*NLIMBS-1 {
    x = __muln_innerloop(k, k-NLIMBS+1, NLIMBS, r, glob_p, x);
    t0 = a[k];
    x = __addacc3(zero, t0, x, k);
    t0 = x[k % 3];
    r[k-NLIMBS] = t0;
    _, _, _, _, _, x[k % 3] = #set0();
  }
  x[(2*NLIMBS-1) % 3] += a[2*NLIMBS-1];
  r[NLIMBS-1] = x[(2*NLIMBS-1) % 3];

  r = __bn_cminusP(r, tmp);
  return r;
}

fn _bn_mulm
( reg ptr u64[NLIMBS] a b r
) -> reg ptr u64[NLIMBS] {
  stack u64[NLIMBS] tmp;
  stack u64[2*NLIMBS] tmp2;
  tmp2 = __bn_muln(a, b, tmp2);
  r = __bn_rdcn(tmp2, r, tmp);
  return r;
}

fn _bn_mulmU // update inplace
( reg ptr u64[NLIMBS] a b
) -> reg ptr u64[NLIMBS] {
  stack u64[NLIMBS] tmp;
  stack u64[2*NLIMBS] tmp2;
  tmp2 = __bn_muln(a, b, tmp2);
  a = __bn_rdcn(tmp2, a, tmp);
  return a;
}

fn _bn_sqrm
( reg ptr u64[NLIMBS] a r
) -> reg ptr u64[NLIMBS] {
  stack u64[NLIMBS] tmp;
  stack u64[2*NLIMBS] tmp2;
  tmp2 = __bn_sqrn(a, tmp2);
  r = __bn_rdcn(tmp2, r, tmp);
  return r;
}

#[returnaddress="stack"]
fn _bn_sqrmU // update inplace
( reg ptr u64[NLIMBS] a
) -> reg ptr u64[NLIMBS] {
  stack u64[NLIMBS] tmp;
  stack u64[2*NLIMBS] tmp2;
  tmp2 = __bn_sqrn(a, tmp2);
  a = __bn_rdcn(tmp2, a, tmp);
  return a;
}

/* Modular exponentiation
  obs: naive square-multiply algorithm. Not Constant-Time!!!
  (good enough for use with public exponents, such as in inversion) */
#[returnaddress="stack"]
fn _bn_expm
( reg ptr u64[NLIMBS] a b r 
) -> reg ptr u64[NLIMBS] {
  inline int j;
  reg u64 k t;
  reg bool cf;
  stack u64[NLIMBS] x y;
stack u64 ss;
stack ptr u64[NLIMBS] rr bb;

  x = __bn_copy2(a, x);
  r = __bn_copy2(glob_oneM, r);

bb = b;
rr = r;
  for j = 0 to NLIMBS {
b = bb;
    t = b[(int) j];
    k = 64;
    while (k != 0) {
ss = k;
      _, cf, _, _, _, t = #SHR(t, 1);
      if (cf) {
r = rr;
	r = _bn_mulmU(r, x);
rr = r;
      }
      x = _bn_sqrmU(x);
k = ss;
      k -= 1;
    }
  }
r=rr;
  return r;
}

/* Modular Inversion */
inline fn __bn_invm( reg ptr u64[NLIMBS] a r ) -> reg ptr u64[NLIMBS] {
  /* a^{p-2} */
  r = _bn_expm(a, glob_pm2, r);
    
  return r;
}

/* Conversion out from Montgomery form */
fn _bn_fromM( reg ptr u64[NLIMBS] a ) -> reg ptr u64[NLIMBS] {
  stack u64[NLIMBS] tmp;
  stack u64[2*NLIMBS] tmp2;
  reg u64 t;
  inline int i;
  for i = 0 to NLIMBS {
    tmp2[NLIMBS + i] = 0;
  }
  for i = 0 to NLIMBS {
    t = a[i];
    tmp2[i] = t;
  }
  a = __bn_rdcn(tmp2, a, tmp);
  return a;
}

/* Conversion into Montgomery form */
fn _bn_toM( reg ptr u64[NLIMBS] a ) -> reg ptr u64[NLIMBS] {
  a = _bn_mulmU(a, glob_rM);
  return a;
}

