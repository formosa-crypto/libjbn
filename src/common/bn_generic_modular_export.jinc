/*
   GENERIC MODULAR CODE

*/

require "bn_generic_modular.jinc"

export fn bn_addm( reg u64 rp ap bp) {
 stack u64[NLIMBS] a, b, tmp;
 reg ptr u64[NLIMBS] r;
 a = __bn_load(ap);
 b = __bn_load(bp);
 r = __bn_addm(a, b, tmp);
 __bn_store(rp, r);
}

export fn bn_subm( reg u64 rp ap bp) {
 stack u64[NLIMBS] a, b, tmp;
 reg ptr u64[NLIMBS] r;
 a = __bn_load(ap);
 b = __bn_load(bp);
 r = __bn_subm(a, b, tmp);
 __bn_store(rp, r);
}

export fn bn_mulm(reg u64 rp ap bp) {
  reg u64 rp_; 
  stack u64[NLIMBS] a b r;
  a = __bn_load(ap);
  b = __bn_load(bp);
  rp_ = rp; // relax ABI constraint
  r = _bn_mulm(a, b, r);
  __bn_store(rp_, r);
}

export fn bn_sqrm(reg u64 rp ap) {
  reg u64 rp_; 
  stack u64[NLIMBS] a r;
  a = __bn_load(ap);
  rp_ = rp; // relax ABI constraint
  r = _bn_sqrm(a, r);
  __bn_store(rp_, r);
}

export fn bn_expm_noct(reg u64 rp ap bp) {
  stack u64 rp_; 
  stack u64[NLIMBS] a b r;
  a = __bn_load(ap);
  b = __bn_load(bp);
  rp_ = rp; // spill
  r = _bn_expm(a, b, r);
  rp = rp_;
  __bn_store(rp, r);
}

export fn bn_invm(reg u64 rp ap) {
  stack u64 rp_; 
  stack u64[NLIMBS] a r;
  a = __bn_load(ap);
  rp_ = rp; // relax ABI constraint
  r = __bn_invm(a, r);
  rp = rp_;
  __bn_store(rp, r);
}

export fn bn_toM(reg u64 rp ap) {
  reg u64 rp_; 
  stack u64[NLIMBS] a;
  a = __bn_load(ap);
  rp_ = rp; // relax ABI constraint
  a = _bn_toM(a);
  __bn_store(rp_, a);
}

export fn bn_fromM(reg u64 rp ap) {
  reg u64 rp_; 
  stack u64[NLIMBS] a;
  a = __bn_load(ap);
  rp_ = rp; // relax ABI constraint
  a = _bn_fromM(a);
  __bn_store(rp_, a);
}
