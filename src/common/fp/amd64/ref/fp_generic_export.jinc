/*
   GENERIC MODULAR CODE

*/

require "fp_generic.jinc"
from Libjbn require "common/bn/amd64/ref/bn_generic_export.jinc"

export fn fp_add(reg u64 rp ap bp)
{
  stack u64[NLIMBS] _a _b;
  reg ptr u64[NLIMBS] a b;

  _a = __bn_load(ap); a = _a;
  _b = __bn_load(bp); b = _b;
  a = __fp_add(a, b);
  __bn_store(rp, a);
}


export fn fp_sub( reg u64 rp ap bp)
{
  stack u64[NLIMBS] _a _b;
  reg ptr u64[NLIMBS] a b;

  _a = __bn_load(ap); a = _a;
  _b = __bn_load(bp); b = _b;
  a = __fp_sub(a, b);
  __bn_store(rp, a);
}

export fn fp_mul(reg u64 rp ap bp)
{
  stack u64[NLIMBS] _a _b _r;
  reg ptr u64[NLIMBS] a b r;

  _a = __bn_load(ap); a = _a;
  _b = __bn_load(bp); b = _b;
                      r = _r;
  r = __fp_mul(a, b, r);
  __bn_store(rp, r);
}

export fn fp_sqr(reg u64 rp ap)
{
  stack u64[NLIMBS] _a _r;
  reg ptr u64[NLIMBS] a r;

  _a = __bn_load(ap); a = _a;
                      r = _r;
  r = __fp_sqr(a, r);
  __bn_store(rp, r);
}

export fn fp_expm_noct(reg u64 rp ap bp)
{
  stack u64[NLIMBS] _a _b _r;
  reg ptr u64[NLIMBS] a b r;
  stack u64 _rp;

  _rp = rp;
  _a = __bn_load(ap); a = _a;
  _b = __bn_load(bp); b = _b;
                      r = _r;
  r = __fp_exp_noct(a, b, r);
  rp = _rp;
  __bn_store(rp, r);
}

export fn fp_expm(reg u64 rp ap bp)
{
  stack u64[NLIMBS] _a _b _r;
  reg ptr u64[NLIMBS] a b r;
  stack u64 _rp;

  _rp = rp;
  _a = __bn_load(ap); a = _a;
  _b = __bn_load(bp); b = _b;
                      r = _r;
  r = __fp_exp(a, b, r);
  rp = _rp;
  __bn_store(rp, r);
}

export fn fp_inv(reg u64 rp ap)
{
  stack u64[NLIMBS] _a _r;
  reg ptr u64[NLIMBS] a r;
  stack u64 _rp;

  _rp = rp;
  _a = __bn_load(ap); a = _a;
                      r = _r;
  r = __fp_inv(a, r);
  rp = _rp;
  __bn_store(rp, r);
}

export fn fp_toM(reg u64 rp ap)
{
  stack u64[NLIMBS] _a;
  reg ptr u64[NLIMBS] a;
  stack u64 _rp;

  _rp = rp;  
  _a = __bn_load(ap); a = _a;
  a = __fp_toM(a);
  rp = _rp;
  __bn_store(rp, a);
}

export fn fp_fromM(reg u64 rp ap)
{
  stack u64[NLIMBS] _a;
  reg ptr u64[NLIMBS] a;
  stack u64 _rp;

  _rp = rp;
  _a = __bn_load(ap); a = _a;
  a = __fp_fromM(a);
  rp = _rp;
  __bn_store(rp, a);
}

