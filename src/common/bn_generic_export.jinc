/*
   GENERIC CODE (parametric on the number of limbs)

   EXPECTS: "param int NLIMBS=??"

*/

require "bn_generic.jinc"

/* exported version 
 remark: really like to have support for [reg ptr] in
 exported functions :-)...
*/

export fn bn_eq(reg u64 ap bp) -> reg u64 {
 stack u64[NLIMBS] a b;
 reg u64 r;
 a = __bn_load(ap);
 b = __bn_load(bp);
 r = __bn_eq(a, b);
 return r;
}
  
export fn bn_test0(reg u64 ap) -> reg u64 {
 stack u64[NLIMBS] a;
 reg u64 r;
 a = __bn_load(ap);
 r = __bn_test0(a);
 return r;
}
  
export fn bn_copy(reg u64 rp ap) {
  inline int i;
  reg u64 t;
   
  for i = 0 to NLIMBS {
    t = [ap + 8*i];
    [rp + 8*i] = t;
  }
}

export fn bn_set0(reg u64 rp) {
  inline int i;
  for i = 0 to NLIMBS {
    [rp + 8*i] = 0;
  }
}
  
export fn bn_addn(reg u64 rp ap bp) {
 reg bool _cf;
 stack u64[NLIMBS] a, b;
 reg ptr u64[NLIMBS] r;
 a = __bn_load(ap);
 b = __bn_load(bp);
 _cf, r = __bn_addc(a, b);
 __bn_store(rp, r);
}

export fn bn_subn
( reg u64 rp ap bp
) {
 reg bool _cf;
 stack u64[NLIMBS] a, b;
 reg ptr u64[NLIMBS] r;
 a = __bn_load(ap);
 b = __bn_load(bp);
 _cf, r = __bn_subc(a, b);
 __bn_store(rp, r);
}

export fn bn_muln(reg u64 rp ap bp) {
  reg u64 rp_; 
  stack u64[NLIMBS] a b;
  stack u64[2*NLIMBS] r;
  a = __bn_load(ap);
  b = __bn_load(bp);
  rp_ = rp; // relax ABI constraint
  r = __bn_muln(a, b, r);
  __bn2_store(rp_, r);
}

export fn bn_sqrn(reg u64 rp ap) {
  reg u64 rp_; 
  stack u64[NLIMBS] a;
  stack u64[2*NLIMBS] r;
  a = __bn_load(ap);
  rp_ = rp; // relax ABI constraint
  r = __bn_sqrn(a, r);
  __bn2_store(rp_, r);
}

