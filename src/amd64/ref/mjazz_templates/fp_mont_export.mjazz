/*
from Libjbn require "bn_base.mjazz" as "BN"
 with { nlimbs = nlimbs; }
*/
from MJazz require "${qualBN}_bn_base.jinc"

/*
from Libjbn require "fp_mont.mjazz" as "FPM"
 with { nlimbs = nlimbs;
        glob_P = glob_P;
        glob_mP = glob_mP;
        glob_Pi0 = Pi0;
        glob_Pm2 = glob_Pm2; }
*/
from MJazz require "${qualFPM}_fp_mont.jinc"

export fn fp_add(reg u64 rp ap bp)
{
  stack u64[${nlimbs}] _a _b;
  reg ptr u64[${nlimbs}] a b;

  a = _a;
  b = _b;
  a = ${qualBN}_load_(a,ap);
  b = ${qualBN}_load_(b,bp);
  a = ${qualFPM}_addmU_(a, b);
  ${qualBN}_store_(rp, a);
}


export fn fp_sub( reg u64 rp ap bp)
{
  stack u64[${nlimbs}] _a _b;
  reg ptr u64[${nlimbs}] a b;

  a = _a;
  b = _b;
  a = ${qualBN}_load_(a,ap);
  b = ${qualBN}_load_(b,bp);
  a = ${qualFPM}_submU_(a, b);
  ${qualBN}_store_(rp, a);
}

export fn fp_mul(reg u64 rp ap bp)
{
  stack u64[${nlimbs}] _a _b _r;
  reg ptr u64[${nlimbs}] a b r;

  a = _a;
  b = _b;
  a = ${qualBN}_load_(a,ap);
  b = ${qualBN}_load_(b,bp);
  r = _r;
  r = ${qualFPM}_mulm_(r, a, b);
  ${qualBN}_store_(rp, r);
}

export fn fp_sqr(reg u64 rp ap)
{
  stack u64[${nlimbs}] _a _r;
  reg ptr u64[${nlimbs}] a r;

  a = _a;
  a = ${qualBN}_load_(a,ap);
  r = _r;
  r = ${qualFPM}_sqrm_(r, a);
  ${qualBN}_store_(rp, r);
}

export fn fp_exp_noct(reg u64 rp ap bp)
{
  stack u64[${nlimbs}] _a _b _r;
  reg ptr u64[${nlimbs}] a b r;
  stack u64 _rp;

  _rp = rp;
  a = _a;
  a = ${qualBN}_load_(a,ap);
  b = _b;
  b = ${qualBN}_load_(b,bp);
  r = _r;
  r = ${qualFPM}_expm_noct_(r, a, b);
  rp = _rp;
  ${qualBN}_store_(rp, r);
}

export fn fp_exp(reg u64 rp ap bp)
{
  stack u64[${nlimbs}] _a _b _r;
  reg ptr u64[${nlimbs}] a b r;
  stack u64 _rp;

  _rp = rp;
  a = _a;
  a = ${qualBN}_load_(a,ap);
  b = _b;
  b = ${qualBN}_load_(b,bp);
  r = _r;
  r = ${qualFPM}_expm_(r, a, b);
  rp = _rp;
  ${qualBN}_store_(rp, r);
}

export fn fp_inv(reg u64 rp ap)
{
  stack u64[${nlimbs}] _a _r;
  reg ptr u64[${nlimbs}] a r;
  stack u64 _rp;

  _rp = rp;
  a = _a;
  a = ${qualBN}_load_(a,ap);
  r = _r;
  r = ${qualFPM}_invm_(r, a);
  rp = _rp;
  ${qualBN}_store_(rp, r);
}

export fn fp_toM(reg u64 rp ap)
{
  stack u64[${nlimbs}] _a;
  reg ptr u64[${nlimbs}] a;
  stack u64 _rp;

  _rp = rp;
  a = _a;
  a = ${qualBN}_load_(a,ap);
  a = ${qualFPM}_toM_(a);
  rp = _rp;
  ${qualBN}_store_(rp, a);
}

export fn fp_fromM(reg u64 rp ap)
{
  stack u64[${nlimbs}] _a;
  reg ptr u64[${nlimbs}] a;
  stack u64 _rp;

  _rp = rp;
  a = _a;
  a = ${qualBN}_load_(a,ap);
  a = ${qualFPM}_fromM_(a);
  rp = _rp;
  ${qualBN}_store_(rp, a);
}
